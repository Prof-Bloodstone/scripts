#!/usr/bin/env bash

set -euo pipefail

: "${RESTICLY_CONFIG_DIR:="${HOME}/.config/resticly"}"
: "${RESTICLY_DEBUG:=false}" # print debug logs
: "${RESTICLY_TRACE:=false}" # show traces

current_date() {
  date --iso-8601=seconds
}
log() {
  local -r level="${1:?Log level missing}"
  shift
  printf '%s [%s] %s\n' "$(current_date)" "${level}" "${*}" >&2
}
error() {
  log ERROR "${*}"
}
debug() {
  if is_true "${RESTICLY_DEBUG}"; then
    log DEBUG "${*}"
  fi
}
print_help() {
  cat <<HELP
  Usage: ${0##*/} <CONFIG_NAME> <subcommand> [additional args, ...]
  Remember to setup directory ${RESTICLY_CONFIG_DIR}/CONFIG_NAME
  Its structure is:
  - env - should contain all environment configuration, more info below
  - wrapper - wrapper script, executed instead of restic command, if it exists
  The 'env' config file example:
  # Required
  export RESTIC_REPOSITORY=/tmp/repository
  export RESTIC_PASSWORD_FILE="\${HOME}/backup_password"

  # Optional
  # per-subcommand extra variables
  # <action_name>_args=( --flag arg )
  # i.e. to add arguments to 'restic forget':
  forget_args=(
    --prune # Always prune after forgetting
    --keep-daily 7 # Keep all backups created within last 7 days
    --keep-weekly 8 # Keep 8 latest weekly backups
  )
HELP
}
is_true() {
  local -r arg="${1:-}"
  if [ "${arg:-}" == '' ]; then
    error "is_true got empty variable to check!"
    exit 1
  fi
  case "${arg,,}" in
    yes|true|y|t|1) return 0;;
    *) return 1;;
  esac
}
check_config_dir() {
  local -r config_name="${1:?load_config missing config name}"
  local -r config_dir="${RESTICLY_CONFIG_DIR}/${config_name}"

  if [ ! -e "${config_dir}" ]; then
    error "Config '${config_name}' doesn't exist at '${config_dir}'"
    return 1
  fi
  if [ ! -d "${config_dir}" ]; then
    error "Config '${config_dir}' is not a directory"
    return 1
  fi
}
load_config() {
  local -r config_name="${1:?load_config missing config name}"
  local -r config_dir="${RESTICLY_CONFIG_DIR}/${config_name}"
  local -r config_file="${config_dir}/env"
  check_config_dir "${config_name}" || return $?
  if [ ! -e "${config_file}" ]; then
    error "Config file does not exists: ${config_file}"
    return 1
  fi
  if [ ! -r "${config_file}" ]; then
    error "Config file is not readable: ${config_file}"
    return 1
  fi
  debug "Sourcing ${config_file}"
  # shellcheck disable=SC1090
  source "${config_file}" || {
    local -r exit_code="${?}"
    error "Error loading config file - return code was ${exit_code}"
    return "${exit_code}"
  }
}
run() {
  # Run cmd with debug logging
  debug "Running: ${*@Q}"
  command "${@}" || exit_code=$?
  debug "Command ${*@Q} returned ${exit_code:=0}"
  return "${exit_code}"
}
run_wrapped() {
  local -r config_name="${1:?run_wrapped missing config name}"
  local -r config_dir="${RESTICLY_CONFIG_DIR}/${config_name}"
  local -r wrapper_file="${config_dir}/wrapper"
  shift 1
  check_config_dir "${config_name}" || return $?
  if [ ! -e "${wrapper_file}" ]; then
    run restic "${@}" || return $?
  else
    if [ -x "${wrapper_file}" ]; then
      run "${wrapper_file}" "${@}" || return $?
    else
      error "Wrapper exists, but is not executable: ${wrapper_file}"
      return 1
    fi
  fi
}

main() {
  if is_true "${RESTICLY_TRACE}"; then
    set -x
  fi
  # Handle --help earlier, to quicker exit
  for arg in "${@}"; do
    if [ "${arg}" == '--help' ]; then
      print_help
      return 0
    fi
  done

  local -r arg_count="${#@}"

  debug "Got ${arg_count} arguments: ${*@Q}"

  if [ "${arg_count}" -lt 2 ]; then
    error "Requires at least 2 arguments, but ${arg_count} were provided. Try --help"
    return 1
  fi

  local -r conf_name="${1}"
  local -r action_name="${2}"
  shift 2
  local -r extra_args=( "${@}" )
  load_config "${conf_name}"
  local -rn action_args="${action_name}_args"
  debug "Retrieved ${action_name} arguments: ${action_args[*]@Q}"
  # TODO: Time the command
  run_wrapped "${conf_name}" "${action_name}" "${action_args[@]}" "${extra_args[@]}"
}

main "${@}"
